{"Bug-2E-2-Model.txt": {"Logs": [["I get only outputs ranging from 0 to 1 (I guess due to normalization?) and they also seem to be bad.\nI suspect I need to somehow cater for the fact that expect an interval value as an output, not a nominal or ordinal value", 0.18300312656140738], ["Any idea?", 0.16806808925753325], ["I'm still very new to neural networks", 0.09339609075723343]], "Model": [["I'm still very new to neural networks", 0.6290513767053407], ["I try to achieve the following with Keras:\nI have a set of data where f(x) = x^2 + 3", 0.27859321044306873], ["Like this\nx       f(x)\n -10    103\n-9.9    101.01\n-9.8    99.04\n-9.7    97.09\n...\n9.7     97.09\n9.8     99.04\n9.9    101.01\n10     103.\nSo I try to build a model that can predict values f(x) based on x", 0.2675922219077902]], "Code": [["I'm still very new to neural networks", 0.40821784056519883], ["I get only outputs ranging from 0 to 1 (I guess due to normalization?) and they also seem to be bad.\nI suspect I need to somehow cater for the fact that expect an interval value as an output, not a nominal or ordinal value", 0.19513101734277594], ["Any idea?", 0.13571973459132414]]}, 

"Bug-1E-1-Training.txt": {"Code": [["I followed a tutorial on neural network model evaluation using cross-validation with code (given below)", 0.40055436634452657], ["The model code seems exactly the same", 0.3729005740136493], ["I downloaded the data from here as instructed", 0.28825683173760774]], "Logs": [["What could go wrong? Thanks", 0.37424300431736524], ["I downloaded the data from here as instructed", 0.20810783886477147], ["The model code seems exactly the same", 0.13743979758829883]], "Data": [["I downloaded the data from here as instructed", 0.40419697771603436], ["The model code seems exactly the same", 0.20701228559539997], ["I followed a tutorial on neural network model evaluation using cross-validation with code (given below)", 0.1462355311867498]]}, 

"Bug-2E-1-Training.txt": {"Code": [["I tried a simple neural network without concolutions and it didn't work as well", 0.33144471845832224], ["I try to train a CNN model that classifies the handwritten digit using Keras, but I am getting low accuracy in the training (lower than 10%) and a big error", 0.29439011297270845], ["Could anyone advice me on how to improve my model?", 0.17327799739680017]], "Logs": [["I try to train a CNN model that classifies the handwritten digit using Keras, but I am getting low accuracy in the training (lower than 10%) and a big error", 0.10464306953829972], ["Could anyone advice me on how to improve my model?", 0.07208308970054156], ["I tried a simple neural network without concolutions and it didn't work as well", 0.0018177271650672289]], "Data": [["I tried a simple neural network without concolutions and it didn't work as well", 0.25344859699755773], ["Could anyone advice me on how to improve my model?", 0.15879896928172688], ["I try to train a CNN model that classifies the handwritten digit using Keras, but I am getting low accuracy in the training (lower than 10%) and a big error", 0.06537279859824652]]}, 

"Bug-3E-1-Tensor.txt": {"Data": [["Both are populated with 1's and 0's", 0.328340863306235], ["So I do something like this (Code Snippet provided below):\nHowever I get the following error\nTypeError: Cannot convert 1e-12 to EagerTensor of dtype int32.\nThere must be something with the type casting from pandas to tensorflow which is throwing the error", 0.21839004887043978], ["The predicted and actual values are stored in pandas dataframes y_pred and y_act respectively", 0.11865170695417937]], "Logs": [["Both are populated with 1's and 0's", 0.12317555906508582], ["Any tips for converting from pandas to tensors successfully without getting this error?", 0.11520085915640221], ["So I do something like this (Code Snippet provided below):\nHowever I get the following error\nTypeError: Cannot convert 1e-12 to EagerTensor of dtype int32.\nThere must be something with the type casting from pandas to tensorflow which is throwing the error", 0.07572981034384707]], "Code": [["I have a multiclass classification machine learning application for which I want to calculate the f1 score using tensorflow", 0.21193913123149954], ["Both are populated with 1's and 0's", 0.1401966319027932], ["The predicted and actual values are stored in pandas dataframes y_pred and y_act respectively", 0.11041467105850722]]}, 

"Bug-3E-2-API.txt": {"Logs": [["Got 5 and 4 in dimension 2 at /opt/conda/conda-bld/pytorch_1535491974311/work/aten/src/TH/generic/THTensorMath.cpp:3616\nI figure the problem is caused by the input size not being a power of 2 but I am not sure how to rectify it for the given input dimenstions (320, 320).", 0.10206517923966552], ["The model is defined below.\nIf I try:\nmodl = ResUnet((1,320,320), 1)\nx = torch.rand(1, 1, 320, 320)\nmodl(x)\nIt throws an error\n---------------------------------------------------------------------------\nRuntimeError                              Traceback (most recent call last)\n<ipython-input-46-4ddc821c365b> in <module>\n----> 1 modl(x).\n~/.conda/envs/torch0.4/lib/python3.6/site-packages/torch/nn/modules/module.py in __call__(self, *input, **kwargs)\n    475             result = self._slow_forward(*input, **kwargs)/\n    476         else:.\n--> 477             result = self.forward(*input, **kwargs).\n    478         for hook in self._forward_hooks.values():.\n    479             hook_result = hook(self, input, result).\n<ipython-input-36-f9eeefa3c0b8> in forward(self, x).\n    221         de2_ = self.d2(de1).\n    222         #print de2_.size().\n--> 223         de2 = torch.cat([en6add,de2_],1).\n    224         #print de2.size().\n    225\nRuntimeError: invalid argument 0: Sizes of tensors must match except in dimension 1", 0.09990020508471531], ["I have a PyTorch model and I'm trying to test it by performing a forward pass", 0.0786648011957215]], "Code": [["I have a PyTorch model and I'm trying to test it by performing a forward pass", 0.21003158406261602], ["The model is defined below.\nIf I try:\nmodl = ResUnet((1,320,320), 1)\nx = torch.rand(1, 1, 320, 320)\nmodl(x)\nIt throws an error\n---------------------------------------------------------------------------\nRuntimeError                              Traceback (most recent call last)\n<ipython-input-46-4ddc821c365b> in <module>\n----> 1 modl(x).\n~/.conda/envs/torch0.4/lib/python3.6/site-packages/torch/nn/modules/module.py in __call__(self, *input, **kwargs)\n    475             result = self._slow_forward(*input, **kwargs)/\n    476         else:.\n--> 477             result = self.forward(*input, **kwargs).\n    478         for hook in self._forward_hooks.values():.\n    479             hook_result = hook(self, input, result).\n<ipython-input-36-f9eeefa3c0b8> in forward(self, x).\n    221         de2_ = self.d2(de1).\n    222         #print de2_.size().\n--> 223         de2 = torch.cat([en6add,de2_],1).\n    224         #print de2.size().\n    225\nRuntimeError: invalid argument 0: Sizes of tensors must match except in dimension 1", 0.1648335389253036], ["Got 5 and 4 in dimension 2 at /opt/conda/conda-bld/pytorch_1535491974311/work/aten/src/TH/generic/THTensorMath.cpp:3616\nI figure the problem is caused by the input size not being a power of 2 but I am not sure how to rectify it for the given input dimenstions (320, 320).", 0.08840664211982419]], "Model": [["I have a PyTorch model and I'm trying to test it by performing a forward pass", 0.20968413774031514], ["The model is defined below.\nIf I try:\nmodl = ResUnet((1,320,320), 1)\nx = torch.rand(1, 1, 320, 320)\nmodl(x)\nIt throws an error\n---------------------------------------------------------------------------\nRuntimeError                              Traceback (most recent call last)\n<ipython-input-46-4ddc821c365b> in <module>\n----> 1 modl(x).\n~/.conda/envs/torch0.4/lib/python3.6/site-packages/torch/nn/modules/module.py in __call__(self, *input, **kwargs)\n    475             result = self._slow_forward(*input, **kwargs)/\n    476         else:.\n--> 477             result = self.forward(*input, **kwargs).\n    478         for hook in self._forward_hooks.values():.\n    479             hook_result = hook(self, input, result).\n<ipython-input-36-f9eeefa3c0b8> in forward(self, x).\n    221         de2_ = self.d2(de1).\n    222         #print de2_.size().\n--> 223         de2 = torch.cat([en6add,de2_],1).\n    224         #print de2.size().\n    225\nRuntimeError: invalid argument 0: Sizes of tensors must match except in dimension 1", 0.1636253353602246], ["Got 5 and 4 in dimension 2 at /opt/conda/conda-bld/pytorch_1535491974311/work/aten/src/TH/generic/THTensorMath.cpp:3616\nI figure the problem is caused by the input size not being a power of 2 but I am not sure how to rectify it for the given input dimenstions (320, 320).", 0.09881179248531946]]}, 

"Bug-4E-1-Tensor.txt": {"Data": [["Dataset Shape:\nx_train : float32 0.0 1.0 (2444, 64, 64, 1)\ny_train : float32 0.0 1.0 (2444, 2)\nx_test : float32 0.0 1.0 (9123, 64, 64, 1)\ny_test : float32 0.0 1.0 (9123, 2).", 0.4057826983131817], ["I was trying to train a simple Keras network for classification when I faced the following error", 0.1486629206772988], ["I know there is something wrong with my inputs but I couldn't figure out how to fix it", 0.12169256515955218]], "Logs": [["I was trying to train a simple Keras network for classification when I faced the following error", 0.24494687751949773], ["I know there is something wrong with my inputs but I couldn't figure out how to fix it", 0.2356600991200375], ["Here is my code (given below)\nDataset Shape:\nx_train : float32 0.0 1.0 (2444, 64, 64, 1)\ny_train : float32 0.0 1.0 (2444, 2)\nx_test : float32 0.0 1.0 (9123, 64, 64, 1)\ny_test : float32 0.0 1.0 (9123, 2).\nError:\nValueError: Dimensions must be equal, but are 2 and 32 for '{{node Equal}} = Equal[T=DT_FLOAT, incompatible_shape_error=true](IteratorGetNext:1, Cast_1)' with input shapes: [?,2], [?,32,32].", 0.10391593580288316]], "Code": [["I was trying to train a simple Keras network for classification when I faced the following error", 0.3107989164286836], ["I know there is something wrong with my inputs but I couldn't figure out how to fix it", 0.2102099379400867], ["Here is my code (given below)\nDataset Shape:\nx_train : float32 0.0 1.0 (2444, 64, 64, 1)\ny_train : float32 0.0 1.0 (2444, 2)\nx_test : float32 0.0 1.0 (9123, 64, 64, 1)\ny_test : float32 0.0 1.0 (9123, 2).\nError:\nValueError: Dimensions must be equal, but are 2 and 32 for '{{node Equal}} = Equal[T=DT_FLOAT, incompatible_shape_error=true](IteratorGetNext:1, Cast_1)' with input shapes: [?,2], [?,32,32].", 0.13203243382891017]]}, 

"Bug-1E-2-Model.txt": {"Logs": [["so after 150 epochs i get: loss: 0.6932 - acc: 0.5000 - val_loss: 0.6970 - val_acc: 0.1429", 0.13397062428762618], ["The dataset has 4 columns: 3 columns with values in the range [60, 70] and the target variable is binary (0/1 output)", 0.03230136372253589], ["I have constructed an ANN in keras which has 1 input layer(3 inputs), one output layer (1 output) and two hidden layers with with 12 and 3 nodes respectively, as shown below in the code", 0.0218133137493155]], "Model": [["I have constructed an ANN in keras which has 1 input layer(3 inputs), one output layer (1 output) and two hidden layers with with 12 and 3 nodes respectively, as shown below in the code", 0.45854888589022225], ["My question is: how could i modify my NN in order to achieve higher accuracy?", 0.3954967089683725], ["so after 150 epochs i get: loss: 0.6932 - acc: 0.5000 - val_loss: 0.6970 - val_acc: 0.1429", 0.17548741247571664]], "Code": [["My question is: how could i modify my NN in order to achieve higher accuracy?", 0.2875209622953223], ["The dataset has 4 columns: 3 columns with values in the range [60, 70] and the target variable is binary (0/1 output)", 0.21513070640162335], ["so after 150 epochs i get: loss: 0.6932 - acc: 0.5000 - val_loss: 0.6970 - val_acc: 0.1429", 0.19795251302180483]]}, 

"Bug-4E-2-API.txt": {"Logs": [["When I try to evaluate my model on my test data, I get this TypeError: unsupported operand type(s) for +=: 'Dense' and 'str'.\nI looked at the types of the columns from my original dataframe, and everything looks fine.\nprint(df.dtypes)\n## Output\n#Price          int64\n#Beds           int64\n#SqFt           int64\n#Built          int64\n#Garage         int64\n#FullBaths    float64\n#HalfBaths    float64\n#LotSqFt      float64\n#dtype: object.\nI'm not sure if I am messing something up in my neural network to cause this error.", 0.14305570487117047], ["Here is what the top of the dataset looks like.\n\n    Price   Beds    SqFt    Built   Garage  FullBaths   HalfBaths   LotSqFt\n    485000  3       2336    2004    2       2.0          1.0        2178.0\n    430000  4       2106    2005    2       2.0          1.0        2178.0\n    445000  3       1410    1999    1       2.0          0.0        3049.0\nI am using the ReLU activation function", 0.08431012943532523], ["I am trying to use a neural network to predict the price of houses", 0.047663908136112876]], "Code": [["I am trying to use a neural network to predict the price of houses", 0.24246029366311872], ["Here is what the top of the dataset looks like.\n\n    Price   Beds    SqFt    Built   Garage  FullBaths   HalfBaths   LotSqFt\n    485000  3       2336    2004    2       2.0          1.0        2178.0\n    430000  4       2106    2005    2       2.0          1.0        2178.0\n    445000  3       1410    1999    1       2.0          0.0        3049.0\nI am using the ReLU activation function", 0.19835992869700858], ["When I try to evaluate my model on my test data, I get this TypeError: unsupported operand type(s) for +=: 'Dense' and 'str'.\nI looked at the types of the columns from my original dataframe, and everything looks fine.\nprint(df.dtypes)\n## Output\n#Price          int64\n#Beds           int64\n#SqFt           int64\n#Built          int64\n#Garage         int64\n#FullBaths    float64\n#HalfBaths    float64\n#LotSqFt      float64\n#dtype: object.\nI'm not sure if I am messing something up in my neural network to cause this error.", 0.14689019325446262]], "Model": [["I am trying to use a neural network to predict the price of houses", 0.5298067729218771], ["Here is what the top of the dataset looks like.\n\n    Price   Beds    SqFt    Built   Garage  FullBaths   HalfBaths   LotSqFt\n    485000  3       2336    2004    2       2.0          1.0        2178.0\n    430000  4       2106    2005    2       2.0          1.0        2178.0\n    445000  3       1410    1999    1       2.0          0.0        3049.0\nI am using the ReLU activation function", 0.24036755489250983], ["When I try to evaluate my model on my test data, I get this TypeError: unsupported operand type(s) for +=: 'Dense' and 'str'.\nI looked at the types of the columns from my original dataframe, and everything looks fine.\nprint(df.dtypes)\n## Output\n#Price          int64\n#Beds           int64\n#SqFt           int64\n#Built          int64\n#Garage         int64\n#FullBaths    float64\n#HalfBaths    float64\n#LotSqFt      float64\n#dtype: object.\nI'm not sure if I am messing something up in my neural network to cause this error.", 0.19797048075381019]]}}